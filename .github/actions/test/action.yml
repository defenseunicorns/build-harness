name: Run Tests

description: Run Tests

inputs:
  application_id:
    description: 'The GitHub App ID'
    required: true
  application_private_key:
    description: 'The GitHub App private key'
    required: true
  platform:
    description: 'The platform to run the tests on'
    required: true
  github-context:
    description: The GitHub Status Context to use when updating the status
    required: true
  registry:
    description: The registry to push the image to
    required: true
  image-name:
    description: The name of the image to push
    required: true

runs:
  using: composite
  steps:
    - name: Get token
      id: get_installation_token
      uses: peter-murray/workflow-application-token-action@v2
      with:
        application_id: ${{ inputs.application_id }}
        application_private_key: ${{ inputs.application_private_key }}

    # Update GitHub status for pending pipeline run
    - name: "Update GitHub Status for pending"
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state pending -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }} -token ${{ steps.get_installation_token.outputs.token }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "started by @${{ github.event.client_payload.github.actor || github.actor }}"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

    - name: Convert platform to valid artifact name
      id: convert-platform
      uses: mad9000/actions-find-and-replace-string@4
      with:
        source: ${{ inputs.platform }}
        find: '/'
        replace: '-'
        replaceAll: "true"

    - name: Checkout
      uses: actions/checkout@v4

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.registry }}/${{ inputs.image-name }}
        tags: |
          type=raw,value=${{ github.ref_name }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build image to tarball
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ inputs.platform }}
        labels: ${{ steps.meta.outputs.labels }}
        outputs: type=docker,dest=./image.tar
        no-cache: true

    - name: Build SBOM
      shell: bash -e -o pipefail {0}
      run: |
        make sbom IMAGE_TO_SCAN=docker-archive:./image.tar

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{steps.convert-platform.outputs.value}}
        path: |
          sbom.cyclonedx.json
          sbom.spdx.json
          sbom.syft.json
          sbom.table.txt
        if-no-files-found: error

    - name: Build Vuln Report
      shell: bash -e -o pipefail {0}
      run: |
        make vuln-report

    - name: Upload Vuln Report
      uses: actions/upload-artifact@v4
      with:
        name: vuln-report-${{steps.convert-platform.outputs.value}}
        path: |
          vulns.grype.json
          vulns.grype.txt
        if-no-files-found: error

    # this is because the GitHub installation token expires after an hour, non-configurable, sometimes the tests take longer than an hour
    # https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/generating-an-installation-access-token-for-a-github-app
    - name: "Get token again"
      if: ${{ always() }}
      id: get_installation_token_again
      uses: peter-murray/workflow-application-token-action@v2
      with:
        application_id: ${{ inputs.application_id }}
        application_private_key: ${{ inputs.application_private_key }}

    # Update GitHub status for successful pipeline run
    - name: "Update GitHub Status for success"
      if: ${{ success() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state success -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }} -token ${{ steps.get_installation_token_again.outputs.token }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "run passed"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

    # Update GitHub status for failing pipeline run
    - name: "Update GitHub Status for failure"
      if: ${{ failure() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state failure -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }} -token ${{ steps.get_installation_token_again.outputs.token }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "run failed"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

    # Update GitHub status for cancelled pipeline run
    - name: "Update GitHub Status for cancelled"
      if: ${{ cancelled() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state error -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }} -token ${{ steps.get_installation_token_again.outputs.token }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "run cancelled"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}
